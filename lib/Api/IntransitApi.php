<?php
/**
 * IntransitApi
 * PHP version 5
 *
 * @category Class
 * @package  Dhl\ParcelManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DHL Parcel Management API
 *
 * OpenAPI spec version: 1.3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Dhl\ParcelManagement\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Dhl\ParcelManagement\ApiException;
use Dhl\ParcelManagement\Configuration;
use Dhl\ParcelManagement\HeaderSelector;
use Dhl\ParcelManagement\ObjectSerializer;

/**
 * IntransitApi Class Doc Comment
 *
 * @category Class
 * @package  Dhl\ParcelManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IntransitApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation shipmentsShipmentIdOffersGet
     *
     * Queries current offers for in-transit shipments.
     *
     * @param  string $shipmentId The shipment identifier of the in-transit shipment. (required)
     * @param  string $xEKP DHL customer number of the sender (required)
     * @param  string $xRequestID HTTP-Header for HTTP request correlation (optional)
     *
     * @throws \Dhl\ParcelManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Dhl\ParcelManagement\Model\OfferMap
     */
    public function shipmentsShipmentIdOffersGet($shipmentId, $xEKP, $xRequestID = null)
    {
        list($response) = $this->shipmentsShipmentIdOffersGetWithHttpInfo($shipmentId, $xEKP, $xRequestID);
        return $response;
    }

    /**
     * Operation shipmentsShipmentIdOffersGetWithHttpInfo
     *
     * Queries current offers for in-transit shipments.
     *
     * @param  string $shipmentId The shipment identifier of the in-transit shipment. (required)
     * @param  string $xEKP DHL customer number of the sender (required)
     * @param  string $xRequestID HTTP-Header for HTTP request correlation (optional)
     *
     * @throws \Dhl\ParcelManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Dhl\ParcelManagement\Model\OfferMap, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentsShipmentIdOffersGetWithHttpInfo($shipmentId, $xEKP, $xRequestID = null)
    {
        $returnType = '\Dhl\ParcelManagement\Model\OfferMap';
        $request = $this->shipmentsShipmentIdOffersGetRequest($shipmentId, $xEKP, $xRequestID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dhl\ParcelManagement\Model\OfferMap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dhl\ParcelManagement\Model\Status',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentsShipmentIdOffersGetAsync
     *
     * Queries current offers for in-transit shipments.
     *
     * @param  string $shipmentId The shipment identifier of the in-transit shipment. (required)
     * @param  string $xEKP DHL customer number of the sender (required)
     * @param  string $xRequestID HTTP-Header for HTTP request correlation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsShipmentIdOffersGetAsync($shipmentId, $xEKP, $xRequestID = null)
    {
        return $this->shipmentsShipmentIdOffersGetAsyncWithHttpInfo($shipmentId, $xEKP, $xRequestID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentsShipmentIdOffersGetAsyncWithHttpInfo
     *
     * Queries current offers for in-transit shipments.
     *
     * @param  string $shipmentId The shipment identifier of the in-transit shipment. (required)
     * @param  string $xEKP DHL customer number of the sender (required)
     * @param  string $xRequestID HTTP-Header for HTTP request correlation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsShipmentIdOffersGetAsyncWithHttpInfo($shipmentId, $xEKP, $xRequestID = null)
    {
        $returnType = '\Dhl\ParcelManagement\Model\OfferMap';
        $request = $this->shipmentsShipmentIdOffersGetRequest($shipmentId, $xEKP, $xRequestID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentsShipmentIdOffersGet'
     *
     * @param  string $shipmentId The shipment identifier of the in-transit shipment. (required)
     * @param  string $xEKP DHL customer number of the sender (required)
     * @param  string $xRequestID HTTP-Header for HTTP request correlation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipmentsShipmentIdOffersGetRequest($shipmentId, $xEKP, $xRequestID = null)
    {
        // verify the required parameter 'shipmentId' is set
        if ($shipmentId === null || (is_array($shipmentId) && count($shipmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentId when calling shipmentsShipmentIdOffersGet'
            );
        }
        // verify the required parameter 'xEKP' is set
        if ($xEKP === null || (is_array($xEKP) && count($xEKP) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xEKP when calling shipmentsShipmentIdOffersGet'
            );
        }

        $resourcePath = '/shipments/{shipmentId}/offers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xRequestID !== null) {
            $headerParams['X-Request-ID'] = ObjectSerializer::toHeaderValue($xRequestID);
        }
        // header params
        if ($xEKP !== null) {
            $headerParams['X-EKP'] = ObjectSerializer::toHeaderValue($xEKP);
        }

        // path params
        if ($shipmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipmentId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode(
                $this->config->getUsername() . ":" . $this->config->getPassword()
            );
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('DPDHL-User-Authentication-Token');
        if ($apiKey !== null) {
            $headers['DPDHL-User-Authentication-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipmentsShipmentIdOrdersGet
     *
     * Queries current orders for in-transit shipments.
     *
     * @param  string $shipmentId The shipment identifier of the in-transit shipment. (required)
     * @param  string $xEKP DHL customer number of the sender (required)
     * @param  string $xRequestID HTTP-Header for HTTP request correlation (optional)
     *
     * @throws \Dhl\ParcelManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Dhl\ParcelManagement\Model\OrderMap
     */
    public function shipmentsShipmentIdOrdersGet($shipmentId, $xEKP, $xRequestID = null)
    {
        list($response) = $this->shipmentsShipmentIdOrdersGetWithHttpInfo($shipmentId, $xEKP, $xRequestID);
        return $response;
    }

    /**
     * Operation shipmentsShipmentIdOrdersGetWithHttpInfo
     *
     * Queries current orders for in-transit shipments.
     *
     * @param  string $shipmentId The shipment identifier of the in-transit shipment. (required)
     * @param  string $xEKP DHL customer number of the sender (required)
     * @param  string $xRequestID HTTP-Header for HTTP request correlation (optional)
     *
     * @throws \Dhl\ParcelManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Dhl\ParcelManagement\Model\OrderMap, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentsShipmentIdOrdersGetWithHttpInfo($shipmentId, $xEKP, $xRequestID = null)
    {
        $returnType = '\Dhl\ParcelManagement\Model\OrderMap';
        $request = $this->shipmentsShipmentIdOrdersGetRequest($shipmentId, $xEKP, $xRequestID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dhl\ParcelManagement\Model\OrderMap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dhl\ParcelManagement\Model\Status',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentsShipmentIdOrdersGetAsync
     *
     * Queries current orders for in-transit shipments.
     *
     * @param  string $shipmentId The shipment identifier of the in-transit shipment. (required)
     * @param  string $xEKP DHL customer number of the sender (required)
     * @param  string $xRequestID HTTP-Header for HTTP request correlation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsShipmentIdOrdersGetAsync($shipmentId, $xEKP, $xRequestID = null)
    {
        return $this->shipmentsShipmentIdOrdersGetAsyncWithHttpInfo($shipmentId, $xEKP, $xRequestID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentsShipmentIdOrdersGetAsyncWithHttpInfo
     *
     * Queries current orders for in-transit shipments.
     *
     * @param  string $shipmentId The shipment identifier of the in-transit shipment. (required)
     * @param  string $xEKP DHL customer number of the sender (required)
     * @param  string $xRequestID HTTP-Header for HTTP request correlation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsShipmentIdOrdersGetAsyncWithHttpInfo($shipmentId, $xEKP, $xRequestID = null)
    {
        $returnType = '\Dhl\ParcelManagement\Model\OrderMap';
        $request = $this->shipmentsShipmentIdOrdersGetRequest($shipmentId, $xEKP, $xRequestID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentsShipmentIdOrdersGet'
     *
     * @param  string $shipmentId The shipment identifier of the in-transit shipment. (required)
     * @param  string $xEKP DHL customer number of the sender (required)
     * @param  string $xRequestID HTTP-Header for HTTP request correlation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipmentsShipmentIdOrdersGetRequest($shipmentId, $xEKP, $xRequestID = null)
    {
        // verify the required parameter 'shipmentId' is set
        if ($shipmentId === null || (is_array($shipmentId) && count($shipmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentId when calling shipmentsShipmentIdOrdersGet'
            );
        }
        // verify the required parameter 'xEKP' is set
        if ($xEKP === null || (is_array($xEKP) && count($xEKP) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xEKP when calling shipmentsShipmentIdOrdersGet'
            );
        }

        $resourcePath = '/shipments/{shipmentId}/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xRequestID !== null) {
            $headerParams['X-Request-ID'] = ObjectSerializer::toHeaderValue($xRequestID);
        }
        // header params
        if ($xEKP !== null) {
            $headerParams['X-EKP'] = ObjectSerializer::toHeaderValue($xEKP);
        }

        // path params
        if ($shipmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipmentId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode(
                $this->config->getUsername() . ":" . $this->config->getPassword()
            );
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('DPDHL-User-Authentication-Token');
        if ($apiKey !== null) {
            $headers['DPDHL-User-Authentication-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipmentsShipmentIdOrdersPreferredDayPut
     *
     * Sets a preferred delivery day for a given shipment.
     *
     * @param  string $shipmentId The shipment identifier of the in-transit shipment. (required)
     * @param  string $xEKP DHL customer number of the sender (required)
     * @param  \Dhl\ParcelManagement\Model\PreferredDayOrder $body PreferredDayOrder object (required)
     * @param  string $xRequestID HTTP-Header for HTTP request correlation (optional)
     *
     * @throws \Dhl\ParcelManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipmentsShipmentIdOrdersPreferredDayPut($shipmentId, $xEKP, $body, $xRequestID = null)
    {
        $this->shipmentsShipmentIdOrdersPreferredDayPutWithHttpInfo($shipmentId, $xEKP, $body, $xRequestID);
    }

    /**
     * Operation shipmentsShipmentIdOrdersPreferredDayPutWithHttpInfo
     *
     * Sets a preferred delivery day for a given shipment.
     *
     * @param  string $shipmentId The shipment identifier of the in-transit shipment. (required)
     * @param  string $xEKP DHL customer number of the sender (required)
     * @param  \Dhl\ParcelManagement\Model\PreferredDayOrder $body PreferredDayOrder object (required)
     * @param  string $xRequestID HTTP-Header for HTTP request correlation (optional)
     *
     * @throws \Dhl\ParcelManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentsShipmentIdOrdersPreferredDayPutWithHttpInfo($shipmentId, $xEKP, $body, $xRequestID = null)
    {
        $returnType = '';
        $request = $this->shipmentsShipmentIdOrdersPreferredDayPutRequest($shipmentId, $xEKP, $body, $xRequestID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dhl\ParcelManagement\Model\Status',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentsShipmentIdOrdersPreferredDayPutAsync
     *
     * Sets a preferred delivery day for a given shipment.
     *
     * @param  string $shipmentId The shipment identifier of the in-transit shipment. (required)
     * @param  string $xEKP DHL customer number of the sender (required)
     * @param  \Dhl\ParcelManagement\Model\PreferredDayOrder $body PreferredDayOrder object (required)
     * @param  string $xRequestID HTTP-Header for HTTP request correlation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsShipmentIdOrdersPreferredDayPutAsync($shipmentId, $xEKP, $body, $xRequestID = null)
    {
        return $this->shipmentsShipmentIdOrdersPreferredDayPutAsyncWithHttpInfo($shipmentId, $xEKP, $body, $xRequestID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentsShipmentIdOrdersPreferredDayPutAsyncWithHttpInfo
     *
     * Sets a preferred delivery day for a given shipment.
     *
     * @param  string $shipmentId The shipment identifier of the in-transit shipment. (required)
     * @param  string $xEKP DHL customer number of the sender (required)
     * @param  \Dhl\ParcelManagement\Model\PreferredDayOrder $body PreferredDayOrder object (required)
     * @param  string $xRequestID HTTP-Header for HTTP request correlation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsShipmentIdOrdersPreferredDayPutAsyncWithHttpInfo(
        $shipmentId,
        $xEKP,
        $body,
        $xRequestID = null
    ) {
        $returnType = '';
        $request = $this->shipmentsShipmentIdOrdersPreferredDayPutRequest($shipmentId, $xEKP, $body, $xRequestID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentsShipmentIdOrdersPreferredDayPut'
     *
     * @param  string $shipmentId The shipment identifier of the in-transit shipment. (required)
     * @param  string $xEKP DHL customer number of the sender (required)
     * @param  \Dhl\ParcelManagement\Model\PreferredDayOrder $body PreferredDayOrder object (required)
     * @param  string $xRequestID HTTP-Header for HTTP request correlation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipmentsShipmentIdOrdersPreferredDayPutRequest(
        $shipmentId,
        $xEKP,
        $body,
        $xRequestID = null
    ) {
        // verify the required parameter 'shipmentId' is set
        if ($shipmentId === null || (is_array($shipmentId) && count($shipmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentId when calling shipmentsShipmentIdOrdersPreferredDayPut'
            );
        }
        // verify the required parameter 'xEKP' is set
        if ($xEKP === null || (is_array($xEKP) && count($xEKP) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xEKP when calling shipmentsShipmentIdOrdersPreferredDayPut'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling shipmentsShipmentIdOrdersPreferredDayPut'
            );
        }

        $resourcePath = '/shipments/{shipmentId}/orders/preferredDay';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xRequestID !== null) {
            $headerParams['X-Request-ID'] = ObjectSerializer::toHeaderValue($xRequestID);
        }
        // header params
        if ($xEKP !== null) {
            $headerParams['X-EKP'] = ObjectSerializer::toHeaderValue($xEKP);
        }

        // path params
        if ($shipmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipmentId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode(
                $this->config->getUsername() . ":" . $this->config->getPassword()
            );
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('DPDHL-User-Authentication-Token');
        if ($apiKey !== null) {
            $headers['DPDHL-User-Authentication-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipmentsShipmentIdOrdersPreferredLocationPut
     *
     * Nominates a location in proximity to the recipient address where the shipment is supposed to be dropped if the
     * original recipient is absent.
     *
     * @param  string $shipmentId The shipment identifier of the in-transit shipment. (required)
     * @param  string $xEKP DHL customer number of the sender (required)
     * @param  \Dhl\ParcelManagement\Model\PreferredLocationOrder $body PreferredLocationOrder object (required)
     * @param  string $xRequestID HTTP-Header for HTTP request correlation (optional)
     *
     * @throws \Dhl\ParcelManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipmentsShipmentIdOrdersPreferredLocationPut($shipmentId, $xEKP, $body, $xRequestID = null)
    {
        $this->shipmentsShipmentIdOrdersPreferredLocationPutWithHttpInfo($shipmentId, $xEKP, $body, $xRequestID);
    }

    /**
     * Operation shipmentsShipmentIdOrdersPreferredLocationPutWithHttpInfo
     *
     * Nominates a location in proximity to the recipient address where the shipment is supposed to be dropped
     *  if the original recipient is absent.
     *
     * @param  string $shipmentId The shipment identifier of the in-transit shipment. (required)
     * @param  string $xEKP DHL customer number of the sender (required)
     * @param  \Dhl\ParcelManagement\Model\PreferredLocationOrder $body PreferredLocationOrder object (required)
     * @param  string $xRequestID HTTP-Header for HTTP request correlation (optional)
     *
     * @throws \Dhl\ParcelManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentsShipmentIdOrdersPreferredLocationPutWithHttpInfo(
        $shipmentId,
        $xEKP,
        $body,
        $xRequestID = null
    ) {
        $returnType = '';
        $request = $this->shipmentsShipmentIdOrdersPreferredLocationPutRequest($shipmentId, $xEKP, $body, $xRequestID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dhl\ParcelManagement\Model\Status',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentsShipmentIdOrdersPreferredLocationPutAsync
     *
     * Nominates a location in proximity to the recipient address where the shipment is supposed to be dropped if
     * the original recipient is absent.
     *
     * @param  string $shipmentId The shipment identifier of the in-transit shipment. (required)
     * @param  string $xEKP DHL customer number of the sender (required)
     * @param  \Dhl\ParcelManagement\Model\PreferredLocationOrder $body PreferredLocationOrder object (required)
     * @param  string $xRequestID HTTP-Header for HTTP request correlation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsShipmentIdOrdersPreferredLocationPutAsync($shipmentId, $xEKP, $body, $xRequestID = null)
    {
        return $this->shipmentsShipmentIdOrdersPreferredLocationPutAsyncWithHttpInfo(
            $shipmentId,
            $xEKP,
            $body,
            $xRequestID
        )
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentsShipmentIdOrdersPreferredLocationPutAsyncWithHttpInfo
     *
     * Nominates a location in proximity to the recipient address where the shipment is supposed to be
     * dropped if the original recipient is absent.
     *
     * @param  string $shipmentId The shipment identifier of the in-transit shipment. (required)
     * @param  string $xEKP DHL customer number of the sender (required)
     * @param  \Dhl\ParcelManagement\Model\PreferredLocationOrder $body PreferredLocationOrder object (required)
     * @param  string $xRequestID HTTP-Header for HTTP request correlation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsShipmentIdOrdersPreferredLocationPutAsyncWithHttpInfo(
        $shipmentId,
        $xEKP,
        $body,
        $xRequestID = null
    ) {
        $returnType = '';
        $request = $this->shipmentsShipmentIdOrdersPreferredLocationPutRequest($shipmentId, $xEKP, $body, $xRequestID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentsShipmentIdOrdersPreferredLocationPut'
     *
     * @param  string $shipmentId The shipment identifier of the in-transit shipment. (required)
     * @param  string $xEKP DHL customer number of the sender (required)
     * @param  \Dhl\ParcelManagement\Model\PreferredLocationOrder $body PreferredLocationOrder object (required)
     * @param  string $xRequestID HTTP-Header for HTTP request correlation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipmentsShipmentIdOrdersPreferredLocationPutRequest(
        $shipmentId,
        $xEKP,
        $body,
        $xRequestID = null
    ) {
        // verify the required parameter 'shipmentId' is set
        if ($shipmentId === null || (is_array($shipmentId) && count($shipmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentId when calling shipmentsShipmentIdOrdersPreferredLocationPut'
            );
        }
        // verify the required parameter 'xEKP' is set
        if ($xEKP === null || (is_array($xEKP) && count($xEKP) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xEKP when calling shipmentsShipmentIdOrdersPreferredLocationPut'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling shipmentsShipmentIdOrdersPreferredLocationPut'
            );
        }

        $resourcePath = '/shipments/{shipmentId}/orders/preferredLocation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xRequestID !== null) {
            $headerParams['X-Request-ID'] = ObjectSerializer::toHeaderValue($xRequestID);
        }
        // header params
        if ($xEKP !== null) {
            $headerParams['X-EKP'] = ObjectSerializer::toHeaderValue($xEKP);
        }

        // path params
        if ($shipmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipmentId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode(
                $this->config->getUsername() . ":" . $this->config->getPassword()
            );
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('DPDHL-User-Authentication-Token');
        if ($apiKey !== null) {
            $headers['DPDHL-User-Authentication-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipmentsShipmentIdOrdersPreferredNeighbourPut
     *
     * Nominates a preferred neighbour that is eligible to receive the shipment, if the original recepient is absent.
     *
     * @param  string $shipmentId The shipment identifier of the in-transit shipment. (required)
     * @param  string $xEKP DHL customer number of the sender (required)
     * @param  \Dhl\ParcelManagement\Model\PreferredNeighbourOrder $body PreferredNeighbourOrder object (required)
     * @param  string $xRequestID HTTP-Header for HTTP request correlation (optional)
     *
     * @throws \Dhl\ParcelManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipmentsShipmentIdOrdersPreferredNeighbourPut($shipmentId, $xEKP, $body, $xRequestID = null)
    {
        $this->shipmentsShipmentIdOrdersPreferredNeighbourPutWithHttpInfo($shipmentId, $xEKP, $body, $xRequestID);
    }

    /**
     * Operation shipmentsShipmentIdOrdersPreferredNeighbourPutWithHttpInfo
     *
     * Nominates a preferred neighbour that is eligible to receive the shipment, if the original recepient is absent.
     *
     * @param  string $shipmentId The shipment identifier of the in-transit shipment. (required)
     * @param  string $xEKP DHL customer number of the sender (required)
     * @param  \Dhl\ParcelManagement\Model\PreferredNeighbourOrder $body PreferredNeighbourOrder object (required)
     * @param  string $xRequestID HTTP-Header for HTTP request correlation (optional)
     *
     * @throws \Dhl\ParcelManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentsShipmentIdOrdersPreferredNeighbourPutWithHttpInfo(
        $shipmentId,
        $xEKP,
        $body,
        $xRequestID = null
    ) {
        $returnType = '';
        $request = $this->shipmentsShipmentIdOrdersPreferredNeighbourPutRequest($shipmentId, $xEKP, $body, $xRequestID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dhl\ParcelManagement\Model\Status',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentsShipmentIdOrdersPreferredNeighbourPutAsync
     *
     * Nominates a preferred neighbour that is eligible to receive the shipment, if the original recepient is absent.
     *
     * @param  string $shipmentId The shipment identifier of the in-transit shipment. (required)
     * @param  string $xEKP DHL customer number of the sender (required)
     * @param  \Dhl\ParcelManagement\Model\PreferredNeighbourOrder $body PreferredNeighbourOrder object (required)
     * @param  string $xRequestID HTTP-Header for HTTP request correlation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsShipmentIdOrdersPreferredNeighbourPutAsync($shipmentId, $xEKP, $body, $xRequestID = null)
    {
        return $this->shipmentsShipmentIdOrdersPreferredNeighbourPutAsyncWithHttpInfo(
            $shipmentId,
            $xEKP,
            $body,
            $xRequestID
        )->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentsShipmentIdOrdersPreferredNeighbourPutAsyncWithHttpInfo
     *
     * Nominates a preferred neighbour that is eligible to receive the shipment, if the original recepient is absent.
     *
     * @param  string $shipmentId The shipment identifier of the in-transit shipment. (required)
     * @param  string $xEKP DHL customer number of the sender (required)
     * @param  \Dhl\ParcelManagement\Model\PreferredNeighbourOrder $body PreferredNeighbourOrder object (required)
     * @param  string $xRequestID HTTP-Header for HTTP request correlation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsShipmentIdOrdersPreferredNeighbourPutAsyncWithHttpInfo(
        $shipmentId,
        $xEKP,
        $body,
        $xRequestID = null
    ) {
        $returnType = '';
        $request = $this->shipmentsShipmentIdOrdersPreferredNeighbourPutRequest($shipmentId, $xEKP, $body, $xRequestID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentsShipmentIdOrdersPreferredNeighbourPut'
     *
     * @param  string $shipmentId The shipment identifier of the in-transit shipment. (required)
     * @param  string $xEKP DHL customer number of the sender (required)
     * @param  \Dhl\ParcelManagement\Model\PreferredNeighbourOrder $body PreferredNeighbourOrder object (required)
     * @param  string $xRequestID HTTP-Header for HTTP request correlation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipmentsShipmentIdOrdersPreferredNeighbourPutRequest(
        $shipmentId,
        $xEKP,
        $body,
        $xRequestID = null
    ) {
        // verify the required parameter 'shipmentId' is set
        if ($shipmentId === null || (is_array($shipmentId) && count($shipmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentId when calling shipmentsShipmentIdOrdersPreferredNeighbourPut'
            );
        }
        // verify the required parameter 'xEKP' is set
        if ($xEKP === null || (is_array($xEKP) && count($xEKP) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xEKP when calling shipmentsShipmentIdOrdersPreferredNeighbourPut'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling shipmentsShipmentIdOrdersPreferredNeighbourPut'
            );
        }

        $resourcePath = '/shipments/{shipmentId}/orders/preferredNeighbour';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xRequestID !== null) {
            $headerParams['X-Request-ID'] = ObjectSerializer::toHeaderValue($xRequestID);
        }
        // header params
        if ($xEKP !== null) {
            $headerParams['X-EKP'] = ObjectSerializer::toHeaderValue($xEKP);
        }

        // path params
        if ($shipmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipmentId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode(
                $this->config->getUsername() . ":" . $this->config->getPassword()
            );
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('DPDHL-User-Authentication-Token');
        if ($apiKey !== null) {
            $headers['DPDHL-User-Authentication-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipmentsShipmentIdOrdersShipmentStopPut
     *
     * Places orders for stopping shipments that are still in transit and returns them directly to the sender.
     *
     * @param  string $shipmentId The shipment identifier of the in-transit shipment. (required)
     * @param  string $xEKP DHL customer number of the sender (required)
     * @param  string $xRequestID HTTP-Header for HTTP request correlation (optional)
     *
     * @throws \Dhl\ParcelManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipmentsShipmentIdOrdersShipmentStopPut($shipmentId, $xEKP, $xRequestID = null)
    {
        $this->shipmentsShipmentIdOrdersShipmentStopPutWithHttpInfo($shipmentId, $xEKP, $xRequestID);
    }

    /**
     * Operation shipmentsShipmentIdOrdersShipmentStopPutWithHttpInfo
     *
     * Places orders for stopping shipments that are still in transit and returns them directly to the sender.
     *
     * @param  string $shipmentId The shipment identifier of the in-transit shipment. (required)
     * @param  string $xEKP DHL customer number of the sender (required)
     * @param  string $xRequestID HTTP-Header for HTTP request correlation (optional)
     *
     * @throws \Dhl\ParcelManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentsShipmentIdOrdersShipmentStopPutWithHttpInfo($shipmentId, $xEKP, $xRequestID = null)
    {
        $returnType = '';
        $request = $this->shipmentsShipmentIdOrdersShipmentStopPutRequest($shipmentId, $xEKP, $xRequestID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dhl\ParcelManagement\Model\Status',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentsShipmentIdOrdersShipmentStopPutAsync
     *
     * Places orders for stopping shipments that are still in transit and returns them directly to the sender.
     *
     * @param  string $shipmentId The shipment identifier of the in-transit shipment. (required)
     * @param  string $xEKP DHL customer number of the sender (required)
     * @param  string $xRequestID HTTP-Header for HTTP request correlation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsShipmentIdOrdersShipmentStopPutAsync($shipmentId, $xEKP, $xRequestID = null)
    {
        return $this->shipmentsShipmentIdOrdersShipmentStopPutAsyncWithHttpInfo($shipmentId, $xEKP, $xRequestID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentsShipmentIdOrdersShipmentStopPutAsyncWithHttpInfo
     *
     * Places orders for stopping shipments that are still in transit and returns them directly to the sender.
     *
     * @param  string $shipmentId The shipment identifier of the in-transit shipment. (required)
     * @param  string $xEKP DHL customer number of the sender (required)
     * @param  string $xRequestID HTTP-Header for HTTP request correlation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsShipmentIdOrdersShipmentStopPutAsyncWithHttpInfo($shipmentId, $xEKP, $xRequestID = null)
    {
        $returnType = '';
        $request = $this->shipmentsShipmentIdOrdersShipmentStopPutRequest($shipmentId, $xEKP, $xRequestID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentsShipmentIdOrdersShipmentStopPut'
     *
     * @param  string $shipmentId The shipment identifier of the in-transit shipment. (required)
     * @param  string $xEKP DHL customer number of the sender (required)
     * @param  string $xRequestID HTTP-Header for HTTP request correlation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipmentsShipmentIdOrdersShipmentStopPutRequest($shipmentId, $xEKP, $xRequestID = null)
    {
        // verify the required parameter 'shipmentId' is set
        if ($shipmentId === null || (is_array($shipmentId) && count($shipmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentId when calling shipmentsShipmentIdOrdersShipmentStopPut'
            );
        }
        // verify the required parameter 'xEKP' is set
        if ($xEKP === null || (is_array($xEKP) && count($xEKP) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xEKP when calling shipmentsShipmentIdOrdersShipmentStopPut'
            );
        }

        $resourcePath = '/shipments/{shipmentId}/orders/shipmentStop';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xRequestID !== null) {
            $headerParams['X-Request-ID'] = ObjectSerializer::toHeaderValue($xRequestID);
        }
        // header params
        if ($xEKP !== null) {
            $headerParams['X-EKP'] = ObjectSerializer::toHeaderValue($xEKP);
        }

        // path params
        if ($shipmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipmentId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode(
                $this->config->getUsername() . ":" . $this->config->getPassword()
            );
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('DPDHL-User-Authentication-Token');
        if ($apiKey !== null) {
            $headers['DPDHL-User-Authentication-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
