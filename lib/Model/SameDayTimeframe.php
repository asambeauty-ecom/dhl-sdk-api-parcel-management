<?php
/**
 * SameDayTimeframe
 *
 * PHP version 5
 *
 * @category Class
 * @package  Dhl\ParcelManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DHL Parcel Management API
 *
 * OpenAPI spec version: 1.3.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Dhl\ParcelManagement\Model;

use \ArrayAccess;
use \Dhl\ParcelManagement\ObjectSerializer;

/**
 * SameDayTimeframe Class Doc Comment
 *
 * @category Class
 * @description A time interval &#x60;[start,end]&#x60;, i.e., beginning at &#x60;start&#x60; and ending at &#x60;end&#x60; independent to an actual date. Each timeframe has an individual code which is given in &#x60;code&#x60;. Additionally, the Densely Populated Area (DPA) identifier and name is given. Both are required to check for availability in the contracts with DHL. The &#x60;&#x60;deliveryBaseId&#x60;&#x60; denotes the Delivery Base which has to be used by the sender to enable same day delivery.
 * @package  Dhl\ParcelManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SameDayTimeframe implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SameDayTimeframe';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'start' => 'string',
        'end' => 'string',
        'code' => 'string',
        'denselyPopulatedAreaId' => 'string',
        'denselyPopulatedAreaName' => 'string',
        'deliveryBaseId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'start' => 'time',
        'end' => 'time',
        'code' => null,
        'denselyPopulatedAreaId' => null,
        'denselyPopulatedAreaName' => null,
        'deliveryBaseId' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'start' => 'start',
        'end' => 'end',
        'code' => 'code',
        'denselyPopulatedAreaId' => 'DenselyPopulatedAreaId',
        'denselyPopulatedAreaName' => 'DenselyPopulatedAreaName',
        'deliveryBaseId' => 'deliveryBaseId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'start' => 'setStart',
        'end' => 'setEnd',
        'code' => 'setCode',
        'denselyPopulatedAreaId' => 'setDenselyPopulatedAreaId',
        'denselyPopulatedAreaName' => 'setDenselyPopulatedAreaName',
        'deliveryBaseId' => 'setDeliveryBaseId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'start' => 'getStart',
        'end' => 'getEnd',
        'code' => 'getCode',
        'denselyPopulatedAreaId' => 'getDenselyPopulatedAreaId',
        'denselyPopulatedAreaName' => 'getDenselyPopulatedAreaName',
        'deliveryBaseId' => 'getDeliveryBaseId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['start'] = isset($data['start']) ? $data['start'] : null;
        $this->container['end'] = isset($data['end']) ? $data['end'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['denselyPopulatedAreaId'] = isset($data['denselyPopulatedAreaId']) ? $data['denselyPopulatedAreaId'] : null;
        $this->container['denselyPopulatedAreaName'] = isset($data['denselyPopulatedAreaName']) ? $data['denselyPopulatedAreaName'] : null;
        $this->container['deliveryBaseId'] = isset($data['deliveryBaseId']) ? $data['deliveryBaseId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['start'] === null) {
            $invalidProperties[] = "'start' can't be null";
        }
        if ($this->container['end'] === null) {
            $invalidProperties[] = "'end' can't be null";
        }
        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        if ($this->container['denselyPopulatedAreaId'] === null) {
            $invalidProperties[] = "'denselyPopulatedAreaId' can't be null";
        }
        if ($this->container['denselyPopulatedAreaName'] === null) {
            $invalidProperties[] = "'denselyPopulatedAreaName' can't be null";
        }
        if ($this->container['deliveryBaseId'] === null) {
            $invalidProperties[] = "'deliveryBaseId' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets start
     *
     * @return string
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     *
     * @param string $start start
     *
     * @return $this
     */
    public function setStart($start)
    {
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets end
     *
     * @return string
     */
    public function getEnd()
    {
        return $this->container['end'];
    }

    /**
     * Sets end
     *
     * @param string $end end
     *
     * @return $this
     */
    public function setEnd($end)
    {
        $this->container['end'] = $end;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets denselyPopulatedAreaId
     *
     * @return string
     */
    public function getDenselyPopulatedAreaId()
    {
        return $this->container['denselyPopulatedAreaId'];
    }

    /**
     * Sets denselyPopulatedAreaId
     *
     * @param string $denselyPopulatedAreaId denselyPopulatedAreaId
     *
     * @return $this
     */
    public function setDenselyPopulatedAreaId($denselyPopulatedAreaId)
    {
        $this->container['denselyPopulatedAreaId'] = $denselyPopulatedAreaId;

        return $this;
    }

    /**
     * Gets denselyPopulatedAreaName
     *
     * @return string
     */
    public function getDenselyPopulatedAreaName()
    {
        return $this->container['denselyPopulatedAreaName'];
    }

    /**
     * Sets denselyPopulatedAreaName
     *
     * @param string $denselyPopulatedAreaName denselyPopulatedAreaName
     *
     * @return $this
     */
    public function setDenselyPopulatedAreaName($denselyPopulatedAreaName)
    {
        $this->container['denselyPopulatedAreaName'] = $denselyPopulatedAreaName;

        return $this;
    }

    /**
     * Gets deliveryBaseId
     *
     * @return string
     */
    public function getDeliveryBaseId()
    {
        return $this->container['deliveryBaseId'];
    }

    /**
     * Sets deliveryBaseId
     *
     * @param string $deliveryBaseId deliveryBaseId
     *
     * @return $this
     */
    public function setDeliveryBaseId($deliveryBaseId)
    {
        $this->container['deliveryBaseId'] = $deliveryBaseId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


